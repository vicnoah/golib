// Package v1 支付安全算法v1
package v1

// app流程
// 1.发起支付请求
// 2.拿取服务端keyPair格式为base64(公钥+公钥签名)公钥及签名,公钥签名=rsa signPSS(私钥+sha256(公钥))
// 3.提取服务端rsa OAEP算法公钥,使用sha256(公钥)生成摘要,使用rsa VerifyPSS(摘要,签名)验证签名,如验证不通过代表支付环境不安全,数据已被篡改
// 4.生成客户端随机rsa密钥对,基于x509 PKCS1算法
// 5.生成随机aes256 CBC加密密钥,为16位
// 6.基于服务端rsa OAEP公钥对随机aes密钥进行加密,使用base64编码
// 7.对支付主体数据进行加密,采用客户端随机aes256 CBC的加密密钥,密文使用base64编码
// 8.得到主体密文,主体密文 = 将加密aes密钥对,支付密文,客户端签名公钥进行连接
// 		主体密文 = 支付密文 + 加密(aes密钥) + 客户端随机rsa公钥
//      密文连接格式: 支付密文.加密(aes密钥).客户端随机rsa公钥
// 		支付密文 = base64(aes256(payload))
// 		aes密钥 = base64(RSA OAEP(aes密钥))
// 		客户端公钥 = base64(rsa随机公钥)
// 9.使用客户端随机rsa密钥对的私钥对主体密文进行sha256摘要,使用rsa signPSS对摘要进行签名,采用base64编码,将签名得到的数据与主体密文连接得到最终密文
// 		签名也是签主体密文
// 		最终密文 = 主体密文 + 签名(主体密文)
// 		密钥格式: 采用点分形式 支付密文.aes密钥.客户端rsa公钥.签名
// 		密文示例: OipsPI=.oWbWKRUU=.6+nEm9wmcT/bW.Em9wmcT/bWrchg
// 10.将最终密文发送到server端,开始支付

// server流程
// 1.将密文块分包
// 各部分数据,及主体数据
// 		1.支付密文 2.aes密钥密文 3.客户端rsa公钥密文 4.签名密文
// 		body密文 = 支付密文.aes密钥.客户端rsa公钥
// 2.对主体密文进行验签
// 3.基于公钥找到私钥
// 4.基于server端私钥对aes密钥进行解密
// 5.基于解密的随机aes CBC密钥对支付密文进行解密
// 6.完成支付
